<div class="my-2">
  <h1 class="flex items-center gap-1.5 justify-self-start py-2 text-center text-slate-700 transition-all">
    <span class="orb-head"><%=title%></span>
  </h1>
</div>

<div class="space-y-4">
  <div class="bg-default-bg rounded-xl p-4 text-sm shadow-[0_2px_30px_0_rgba(0,0,0,.06)] lg:p-6">
    <!-- 탭메뉴 -->
    <ul
      class="border-main-border mb-4 flex overflow-x-auto border-b text-center text-sm font-medium text-gray-500 lg:mb-6 dark:border-gray-700 dark:text-gray-400"
    >
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="access-logs"
        >
          접속 로그
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="all-stats"
        >
          사용자
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="daily-stats"
        >
          일별 사용자
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="page-stats"
        >
          페이지 뷰
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="referrer-stats"
        >
          출처
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="hourly-stats"
        >
          시간대
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="browser-stats"
        >
          브라우저
        </button>
      </li>
      <li class="me-2 flex-none">
        <button
          class="hover:bg-paper-bg inline-block rounded-t-lg px-4 py-3 hover:text-gray-700 dark:hover:bg-gray-800 dark:hover:text-gray-400"
          data-tab="country-stats"
        >
          국가
        </button>
      </li>
    </ul>

    <!-- 날짜 선택 -->
    <div id="date-container" class="flex hidden justify-between gap-2">
      <div class="w-[200px]">
        <input
          type="date"
          id="date"
          name="date"
          class="orb-input"
          value="<%=new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0]%>"
        />
      </div>
      <button id="btn-logs-view" class="orb-btn orb-btn-primary">조회</button>
    </div>

    <!-- 날짜 범위 선택 -->
    <div id="date-range-container" class="flex hidden flex-col gap-2 lg:flex-row">
      <div class="w-full space-y-2">
        <div class="flex items-center gap-1">
          <input
            type="date"
            id="startDate"
            name="startDate"
            class="orb-input lg:w-[200px]"
            value="<%=new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0]%>"
          />
          ~
          <input
            type="date"
            id="endDate"
            name="endDate"
            class="orb-input lg:w-[200px]"
            value="<%=new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0]%>"
          />
        </div>
        <div class="orb-remark leading-5">
          <p>* 접속 통계는 Google Analytics 데이터를 기반으로 합니다.</p>
          <p>* 접속 통계는 최근 2년간의 데이터만 조회 가능합니다.</p>
          <p>* 접속 통계에 표시되는 날짜는 UTC 기준입니다.</p>
        </div>
      </div>
      <div class="flex justify-end lg:block">
        <button id="btn-stats-search" class="orb-btn orb-btn-primary">조회</button>
      </div>
    </div>
  </div>

  <div class="bg-default-bg rounded-xl p-4 text-sm shadow-[0_2px_30px_0_rgba(0,0,0,.06)] lg:p-6">
    <div class="space-y-4">
      <div id="chart-container" class="hidden h-[400px] w-full items-center justify-center">
        <canvas id="stats-chart"></canvas>
      </div>
      <div id="stats-container" class="flex overflow-x-auto"></div>
    </div>
  </div>
</div>

<!-- grid.js -->
<%- include('../common/library/gridjs') %>

<!-- chart.js -->
<%- include('../common/library/chartjs') %>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    const dateContainer = document.getElementById('date-container');
    const dateRangeContainer = document.getElementById('date-range-container');
    const buttonLogsView = document.getElementById('btn-logs-view');
    const buttonStatsSearch = document.getElementById('btn-stats-search');
    const chartContainer = document.getElementById('chart-container');
    const statsChart = document.getElementById('stats-chart');
    const statsContainer = document.getElementById('stats-container');
    const date = document.getElementById('date');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');

    let currentGrid = null; // 현재 Grid 인스턴스를 저장할 변수
    let currentTab = null; // 현재 탭을 저장할 변수

    // 탭 전환 함수
    const switchTab = (activeTab) => {
      // 모든 탭 버튼에서 active 클래스 제거
      document.querySelectorAll('[data-tab]').forEach((button) => {
        button.classList.remove('active', 'bg-blue-50', 'text-blue-500');
        button.classList.add(
          'hover:bg-paper-bg',
          'hover:text-gray-700',
          'dark:hover:bg-gray-800',
          'dark:hover:text-gray-400'
        );
      });

      // 클릭된 탭 버튼에 active 클래스 추가
      const activeButton = document.querySelector(`[data-tab="${activeTab}"]`);
      if (activeButton) {
        activeButton.classList.remove(
          'hover:bg-paper-bg',
          'hover:text-gray-700',
          'dark:hover:bg-gray-800',
          'dark:hover:text-gray-400'
        );
        activeButton.classList.add('active', 'bg-blue-50', 'text-blue-500');
      }

      if (activeTab === 'access-logs') {
        dateContainer.classList.remove('hidden');
        dateRangeContainer.classList.add('hidden');
      } else {
        dateContainer.classList.add('hidden');
        dateRangeContainer.classList.remove('hidden');
      }

      currentTab = activeTab;
    };

    // Grid 인스턴스 정리 함수
    const cleanupGrid = () => {
      if (currentGrid) {
        currentGrid.destroy();
        currentGrid = null;
      }
    };

    // 날짜 유효성 검사 함수
    const validateDates = () => {
      if (currentTab !== 'access-logs') {
        if (!startDate.value || !endDate.value) {
          toastMessage('error', '시작일과 종료일을 입력해주세요.');
          return false;
        }

        if (startDate.value > endDate.value) {
          toastMessage('error', '시작일이 종료일보다 클 수 없습니다.');
          return false;
        }

        const maxDate = new Date();
        maxDate.setFullYear(maxDate.getFullYear() - 2);
        if (startDate.value < maxDate) {
          toastMessage('error', '최대 2년까지 조회 가능합니다.');
          return false;
        }
      }

      return true;
    };

    // HTML 생성 함수들
    // 접속 로그
    const createAccessLogsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.timestamp,
        item.method,
        item.status,
        item.path,
        item.ip,
        item.origin,
        item.referer,
        item.userAgent,
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['타임스탬프', '메소드', '상태 코드', '경로', '사용자 IP', '원본', '출처', '사용자 에이전트'],
        language: gridLangKoKR,
        search: true,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 사용자
    const createAllStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.activeUsers, item.newUsers, item.sessions, item.screenPageViews]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['총 활성 사용자 수', '총 신규 사용자 수', '총 세션 수', '총 페이지 뷰 수'],
        language: gridLangKoKR,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 일별 사용자
    const createDailyStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.date,
        item.activeUsers,
        item.newUsers,
        item.sessions,
        item.pageViews,
        item.averageSessionDuration.toFixed(2),
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['날짜', '활성 사용자 수', '신규 사용자 수', '세션 수', '페이지 뷰 수', '평균 세션 시간 (초)'],
        language: gridLangKoKR,
        search: true,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 페이지 뷰
    const createPageStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.pagePath, item.views]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['페이지 경로', '페이지 뷰 수'],
        language: gridLangKoKR,
        search: true,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 출처
    const createReferrerStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.source,
        item.medium,
        item.newUsers,
        item.sessions,
        item.pageViews,
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['출처', '매체', '신규 사용자 수', '세션 수', '페이지 뷰 수'],
        language: gridLangKoKR,
        search: true,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 시간대
    const createHourlyStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.hour, item.activeUsers, item.sessions, item.pageViews]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['시간대', '활성 사용자 수', '세션 수', '페이지 뷰 수'],
        language: gridLangKoKR,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 브라우저
    const createBrowserStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.browser,
        item.activeUsers,
        item.sessions,
        item.pageViews,
        item.averageSessionDuration.toFixed(2),
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['브라우저', '활성 사용자 수', '세션 수', '페이지 뷰 수', '평균 세션 시간 (초)'],
        language: gridLangKoKR,
        search: true,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
    };

    // 국가
    const createCountryStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.country, item.activeUsers, item.sessions, item.pageViews]);
      currentGrid = new gridjs.Grid({
        columns: ['국가', '활성 사용자 수', '세션 수', '페이지 뷰 수'],
        language: gridLangKoKR,
        search: true,
        data: gridData,
        resizable: true,
        style: {
          table: {
            'white-space': 'nowrap',
          },
        },
        sort: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 이벤트 핸들러 함수
    const handleStatsClick = async (url, method, createHtml) => {
      if (!validateDates()) return;

      try {
        // 래퍼/컨테이너/메타데이터 초기화
        chartContainer.classList.add('hidden');
        statsContainer.innerHTML = '';

        // URL 조정
        const apiUrl = `${url}?startDate=${startDate.value}&endDate=${endDate.value}`;

        // 데이터 가져오기
        const response = await fetchApi(method, apiUrl, {
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (!response.result) {
          throw new Error(response.message);
        }

        if (response && (Array.isArray(response) ? response.length > 0 : Object.keys(response).length > 0)) {
          createHtml(response);
        } else {
          toastMessage('error', '데이터가 없습니다.');
        }
      } catch (error) {
        toastMessage('error', `오류가 발생했습니다. : ${error.message}`);
      }
    };

    // 초기 탭 설정 (사용자 탭)
    switchTab('access-logs');

    // 탭 버튼에 이벤트 리스너 추가
    document.querySelectorAll('[data-tab]').forEach((button) => {
      button.addEventListener('click', () => {
        const tabName = button.getAttribute('data-tab');
        switchTab(tabName);
      });
    });

    buttonLogsView.addEventListener('click', () => {
      handleStatsClick(
        '<%= apiRoutes.stats.accessLogs.url %>',
        '<%= apiRoutes.stats.accessLogs.method %>',
        createAccessLogsHtml
      );
    });

    buttonStatsSearch.addEventListener('click', () => {
      if (currentTab === null) return;
      if (currentTab === 'all-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.visitor.url %>',
          '<%= apiRoutes.stats.visitor.method %>',
          createAllStatsHtml
        );
      } else if (currentTab === 'daily-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.dailyVisitor.url %>',
          '<%= apiRoutes.stats.dailyVisitor.method %>',
          createDailyStatsHtml
        );
      } else if (currentTab === 'page-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.pageView.url %>',
          '<%= apiRoutes.stats.pageView.method %>',
          createPageStatsHtml
        );
      } else if (currentTab === 'country-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.country.url %>',
          '<%= apiRoutes.stats.country.method %>',
          createCountryStatsHtml
        );
      } else if (currentTab === 'referrer-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.referrer.url %>',
          '<%= apiRoutes.stats.referrer.method %>',
          createReferrerStatsHtml
        );
      } else if (currentTab === 'hourly-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.hourly.url %>',
          '<%= apiRoutes.stats.hourly.method %>',
          createHourlyStatsHtml
        );
      } else if (currentTab === 'browser-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.browser.url %>',
          '<%= apiRoutes.stats.browser.method %>',
          createBrowserStatsHtml
        );
      }
    });
  });
</script>
