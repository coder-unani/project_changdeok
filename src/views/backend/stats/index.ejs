<div class="mb-2 block pt-2">
  <h1 class="flex items-center gap-1.5 justify-self-start py-2 text-center text-slate-700 transition-all">
    <span class="text-xl font-bold"><%=title%></span>
  </h1>
</div>
<div id="adminDetails">
  <div class="mb-4 space-y-3 rounded-xl bg-white p-4 text-sm shadow-[0_2px_30px_0_rgba(0,0,0,.06)] lg:p-6">
    <div
      class="border-b border-gray-200 text-center text-sm font-medium text-gray-500 dark:border-gray-700 dark:text-gray-400"
    >
      <ul class="-mb-px flex flex-wrap">
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="access-logs"
          >
            접속 로그
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="all-stats"
          >
            사용자
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="daily-stats"
          >
            일별 사용자
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="page-stats"
          >
            페이지 뷰
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="referrer-stats"
          >
            출처
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="hourly-stats"
          >
            시간대
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="browser-stats"
          >
            브라우저
          </button>
        </li>
        <li class="me-2">
          <button
            class="inline-block cursor-pointer rounded-t-lg border-b-2 border-transparent p-4 hover:border-gray-300 hover:text-gray-600 dark:hover:text-gray-300"
            data-tab="country-stats"
          >
            국가
          </button>
        </li>
      </ul>
    </div>

    <div id="date-container" class="hidden">
      <div class="flex items-center justify-start gap-2">
        <div>
          <label class="block w-28 font-semibold text-gray-500">날짜</label>
          <input
            type="date"
            id="date"
            name="date"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            value="<%= new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0] %>"
          />
        </div>
        <button
          id="btn-logs-view"
          class="cursor-pointer rounded-md bg-indigo-500 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-600 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none"
        >
          조회
        </button>
      </div>
    </div>
    <div id="date-range-container" class="hidden">
      <div class="flex items-center justify-start gap-2">
        <div>
          <label class="block w-28 font-semibold text-gray-500">시작일</label>
          <input
            type="date"
            id="startDate"
            name="startDate"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            value="<%= new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0] %>"
          />
        </div>
        <div>
          <label class="block w-28 font-semibold text-gray-500">종료일</label>
          <input
            type="date"
            id="endDate"
            name="endDate"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            value="<%= new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0] %>"
          />
        </div>
        <button
          id="btn-stats-search"
          class="cursor-pointer rounded-md bg-indigo-500 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-600 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none"
        >
          조회
        </button>
      </div>
      <p class="text-sm text-gray-500">* 접속 통계는 Google Analytics 데이터를 기반으로 합니다.</p>
      <p class="text-sm text-gray-500">* 접속 통계는 최근 2년간의 데이터만 조회 가능합니다.</p>
      <p class="text-sm text-gray-500">* 접속 통계에 표시되는 날짜는 UTC 기준입니다.</p>
    </div>
  </div>
  <div class="mb-4 space-y-3 rounded-xl bg-white p-4 text-sm shadow-[0_2px_30px_0_rgba(0,0,0,.06)] lg:p-6">
    <div id="chart-container" class="hidden h-[400px] w-full items-center justify-center">
      <canvas id="stats-chart"></canvas>
    </div>
    <div id="stats-metadata"></div>
    <div class="flex items-center justify-start">
      <div id="stats-container"></div>
    </div>
  </div>
</div>

<link rel="stylesheet" href="/js/gridjs@6.2.0/mermaid.min.css" />
<script src="/js/gridjs@6.2.0/gridjs.umd.js"></script>
<script src="/js/chart.js@4.4.9/chart.umd.js"></script>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    const dateContainer = document.getElementById('date-container');
    const dateRangeContainer = document.getElementById('date-range-container');
    const buttonLogsView = document.getElementById('btn-logs-view');
    const buttonStatsSearch = document.getElementById('btn-stats-search');
    const chartContainer = document.getElementById('chart-container');
    const statsChart = document.getElementById('stats-chart');
    const statsContainer = document.getElementById('stats-container');
    const statsMetadata = document.getElementById('stats-metadata');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');
    let currentGrid = null; // 현재 Grid 인스턴스를 저장할 변수
    let currentTab = null; // 현재 탭을 저장할 변수
    // 탭 전환 함수
    const switchTab = (activeTab) => {
      // 모든 탭 버튼에서 active 클래스 제거
      document.querySelectorAll('[data-tab]').forEach((button) => {
        button.classList.remove(
          'active',
          'border-blue-600',
          'text-blue-600',
          'dark:border-blue-500',
          'dark:text-blue-500'
        );
        button.classList.add('border-transparent');
      });

      // 클릭된 탭 버튼에 active 클래스 추가
      const activeButton = document.querySelector(`[data-tab="${activeTab}"]`);
      if (activeButton) {
        activeButton.classList.remove('border-transparent');
        activeButton.classList.add(
          'active',
          'border-blue-600',
          'text-blue-600',
          'dark:border-blue-500',
          'dark:text-blue-500'
        );
      }

      if (activeTab === 'access-logs') {
        dateContainer.classList.remove('hidden');
        dateRangeContainer.classList.add('hidden');
      } else {
        dateContainer.classList.add('hidden');
        dateRangeContainer.classList.remove('hidden');
      }

      currentTab = activeTab;
    };

    // Grid 인스턴스 정리 함수
    const cleanupGrid = () => {
      if (currentGrid) {
        currentGrid.destroy();
        currentGrid = null;
      }
    };

    // 날짜 유효성 검사 함수
    const validateDates = () => {
      if (!startDate.value || !endDate.value) {
        alert('시작일과 종료일을 입력해주세요.');
        return false;
      }

      if (startDate.value > endDate.value) {
        alert('시작일이 종료일보다 클 수 없습니다.');
        return false;
      }

      const maxDate = new Date();
      maxDate.setFullYear(maxDate.getFullYear() - 2);
      if (startDate.value < maxDate) {
        alert('최대 2년까지 조회 가능합니다.');
        return false;
      }

      return true;
    };

    // API 호출 함수
    const fetchStats = async (url, method) => {
      try {
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
          },
        });

        const responseData = await response.json();

        if (!response.ok) {
          throw new Error(responseData.message || response.statusText);
        }

        return responseData;
      } catch (error) {
        alert(error.message || '서버 오류가 발생했습니다.');
      }
    };

    // HTML 생성 함수들
    const createAllStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.activeUsers, item.newUsers, item.sessions, item.screenPageViews]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['총 활성 사용자 수', '총 신규 사용자 수', '총 세션 수', '총 페이지 뷰 수'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    const createDailyStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.date,
        item.activeUsers,
        item.newUsers,
        item.sessions,
        item.pageViews,
        item.averageSessionDuration,
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['날짜', '활성 사용자 수', '신규 사용자 수', '세션 수', '페이지 뷰 수', '평균 세션 시간'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    const createPageStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.pagePath, item.views]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['페이지 경로', '페이지 뷰 수'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    const createCountryStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.country, item.activeUsers, item.sessions, item.pageViews]);
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['국가', '활성 사용자 수', '세션 수', '페이지 뷰 수'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    const createReferrerStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.source,
        item.medium,
        item.newUsers,
        item.sessions,
        item.pageViews,
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['출처', '매체', '신규 사용자 수', '세션 수', '페이지 뷰 수'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    const createHourlyStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [item.hour, item.activeUsers, item.sessions, item.pageViews]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['시간대', '활성 사용자 수', '세션 수', '페이지 뷰 수'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);
      return '';
    };

    const createBrowserStatsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 기간: ${metadata.startDate} ~ ${metadata.endDate} / 결과 행 수: ${metadata.rowCount}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.browser,
        item.activeUsers,
        item.sessions,
        item.pageViews,
        item.averageSessionDuration,
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['브라우저', '활성 사용자 수', '세션 수', '페이지 뷰 수', '평균 세션 시간'],
        fixedHeader: true,
        sort: true,
      });
      currentGrid.render(statsContainer);

      // 차트 생성
      const chartData = {
        labels: gridData.map((item) => item.browser),
        datasets: [
          {
            label: '브라우저 활성 사용자 수',
            data: gridData.map((item) => item.activeUsers),
            backgroundColor: [
              'rgba(255, 99, 132, 0.8)',
              'rgba(54, 162, 235, 0.8)',
              'rgba(255, 206, 86, 0.8)',
              'rgba(75, 192, 192, 0.8)',
              'rgba(153, 102, 255, 0.8)',
              'rgba(255, 159, 64, 0.8)',
            ],
            borderColor: [
              'rgba(255, 99, 132, 1)',
              'rgba(54, 162, 235, 1)',
              'rgba(255, 206, 86, 1)',
              'rgba(75, 192, 192, 1)',
              'rgba(153, 102, 255, 1)',
              'rgba(255, 159, 64, 1)',
            ],
            borderWidth: 1,
            hoverOffset: 4,
          },
        ],
      };

      const config = {
        type: 'doughnut',
        data: chartData,
      };

      // 이전 차트가 있다면 제거
      const existingChart = Chart.getChart(statsChart);
      if (existingChart) {
        existingChart.destroy();
      }

      // 차트 컨테이너 표시
      chartContainer.classList.remove('hidden');

      // 차트 생성
      const chart = new Chart(statsChart, config);
      return '';
    };

    const createAccessLogsHtml = (data) => {
      // 메타데이터와 데이터 분리
      const metadata = data.metadata;
      const stats = data.data;

      // Grid 인스턴스 정리
      cleanupGrid();

      // 메타데이터 생성
      statsMetadata.innerHTML = `조회 날짜: ${metadata.date} / 총 요청 수: ${metadata.totalRequests}`;

      // 데이터 배열 생성
      const statsArray = Array.isArray(stats) ? stats : [stats];
      const gridData = statsArray.map((item) => [
        item.timestamp,
        item.method,
        item.status,
        item.path,
        item.ip,
        item.origin,
        item.referer,
        item.userAgent,
      ]);

      // Grid 인스턴스 생성
      currentGrid = new gridjs.Grid({
        data: gridData,
        columns: ['타임스탬프', '메소드', '상태 코드', '경로', '사용자 IP', '원본', '출처', '사용자 에이전트'],
        fixedHeader: true,
        sort: true,
        search: true,
        pagination: {
          enabled: true,
          limit: 20,
        },
      });
      currentGrid.render(statsContainer);
      return '';
    };

    // 이벤트 핸들러 함수
    const handleStatsClick = async (url, method, createHtml) => {
      if (!validateDates()) return;

      try {
        // 래퍼/컨테이너/메타데이터 초기화
        chartContainer.classList.add('hidden');
        statsContainer.innerHTML = '';
        statsMetadata.innerHTML = '';

        // URL 조정
        let apiUrl;
        if (url === '<%= apiRoutes.stats.accessLogs.url %>') {
          // 접속 로그는 endDate만 사용
          apiUrl = '<%= apiRoutes.stats.accessLogs.url %>?date=' + endDate.value;
        } else {
          apiUrl = url + '?startDate=' + startDate.value + '&endDate=' + endDate.value;
        }

        // 데이터 가져오기
        const data = await fetchStats(apiUrl, method);

        if (data && (Array.isArray(data) ? data.length > 0 : Object.keys(data).length > 0)) {
          createHtml(data);
        } else {
          statsContainer.innerHTML = '<p class="text-gray-500">데이터가 없습니다.</p>';
        }
      } catch (error) {
        statsContainer.innerHTML = `<p class="text-red-500">오류가 발생했습니다: ${error.message}</p>`;
      }
    };

    // 초기 탭 설정 (사용자 탭)
    switchTab('access-logs');

    // 탭 버튼에 이벤트 리스너 추가
    document.querySelectorAll('[data-tab]').forEach((button) => {
      button.addEventListener('click', () => {
        const tabName = button.getAttribute('data-tab');
        switchTab(tabName);
      });
    });

    buttonLogsView.addEventListener('click', () => {
      handleStatsClick(
        '<%= apiRoutes.stats.accessLogs.url %>',
        '<%= apiRoutes.stats.accessLogs.method %>',
        createAccessLogsHtml
      );
    });

    buttonStatsSearch.addEventListener('click', () => {
      console.log(currentTab);
      if (currentTab === null) return;
      if (currentTab === 'all-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.visitor.url %>',
          '<%= apiRoutes.stats.visitor.method %>',
          createAllStatsHtml
        );
      } else if (currentTab === 'daily-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.dailyVisitor.url %>',
          '<%= apiRoutes.stats.dailyVisitor.method %>',
          createDailyStatsHtml
        );
      } else if (currentTab === 'page-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.pageView.url %>',
          '<%= apiRoutes.stats.pageView.method %>',
          createPageStatsHtml
        );
      } else if (currentTab === 'country-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.country.url %>',
          '<%= apiRoutes.stats.country.method %>',
          createCountryStatsHtml
        );
      } else if (currentTab === 'referrer-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.referrer.url %>',
          '<%= apiRoutes.stats.referrer.method %>',
          createReferrerStatsHtml
        );
      } else if (currentTab === 'hourly-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.hourly.url %>',
          '<%= apiRoutes.stats.hourly.method %>',
          createHourlyStatsHtml
        );
      } else if (currentTab === 'browser-stats') {
        handleStatsClick(
          '<%= apiRoutes.stats.browser.url %>',
          '<%= apiRoutes.stats.browser.method %>',
          createBrowserStatsHtml
        );
      }
    });
  });
</script>
