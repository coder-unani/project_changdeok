<div class="my-2">
  <h1 class="flex items-baseline justify-between gap-1.5 py-2 text-center text-slate-700 transition-all">
    <span class="orb-head"><%=title%></span>
    <p class="orb-label text-right"><span class="pr-0.5 text-red-500">*</span>필수입력사항</p>
  </h1>
</div>
<form id="formContentWrite">
  <div class="bg-default-bg mb-4 space-y-4 rounded-xl p-4 text-sm shadow-[0_2px_30px_rgba(0,0,0,.06)] lg:p-6">
    <!-- 제목 -->
    <div>
      <label for="title" class="orb-label mb-2 block">제목<span class="pl-0.5 text-red-500">*</span></label>
      <input type="text" id="title" name="title" class="orb-input" placeholder="제목을 입력해주세요." required />
    </div>

    <!-- 내용 -->
    <div>
      <label for="content" class="orb-label mb-2 block">내용<span class="pl-0.5 text-red-500">*</span></label>
      <div
        id="content"
        class="min-h-[160px] w-full bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
      ></div>
    </div>

    <!-- 버튼 -->
    <div class="flex justify-end gap-2">
      <button type="button" id="btnCancel" class="orb-btn orb-btn-primary">취소</button>
      <button type="submit" class="orb-btn orb-btn-success">등록</button>
    </div>
  </div>
</form>

<!-- Quill Editor -->
<%- include('../common/library/quill') %>

<script nonce="<%=nonce%>">
  // Quill 에디터 초기화
  const editor = initEditor('content');

  // 이미지 업로드 핸들러
  function imageHandler() {
    const input = document.createElement('input');
    input.setAttribute('type', 'file');
    input.setAttribute('accept', 'image/*');
    input.click();

    input.onchange = async () => {
      const file = input.files[0];
      if (file) {
        try {
          // FormData 생성
          const formData = new FormData();
          formData.append('image', file);

          // 이미지 업로드 API 호출
          const response = await fetchApi('POST', '/api/contents/<%=metadata.group.id%>/upload-image', {
            body: formData,
          });

          // 에디터에 이미지 삽입
          const range = editor.getSelection(true);
          editor.insertEmbed(range.index, 'image', response.url);
          editor.setSelection(range.index + 1);

          toastMessage('success', response.message || '이미지 업로드 완료');
        } catch (error) {
          toastMessage('error', error.message || '이미지 업로드 중 오류가 발생했습니다.');
        }
      }
    };
  }

  document.getElementById('formContentWrite').addEventListener('submit', async (e) => {
    e.preventDefault();

    isLoading(true);

    try {
      // 폼 데이터 수집
      const formData = new FormData(e.target);

      // 에디터 내용 가져오기
      const content = editor.root.innerHTML;

      // 폼 데이터 변환
      const data = {};
      formData.forEach((value, key) => {
        data[key] = value;
      });
      data.content = content;

      // 컨텐츠 저장 API 호출
      const response = await fetchApi(
        '<%=apiRoutes.contents.write.method%>',
        '<%=apiRoutes.contents.write.url%>'.replace(':groupId', '<%=metadata.group.id%>'),
        {
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        }
      );

      // 응답 성공
      alertMessage('success', '<%=apiRoutes.contents.write.title%>되었습니다.', '<%=apiRoutes.contents.write.title%>')
        .then(() => {
          window.location.href = '<%=backendRoutes.contents.list.url%>'.replace(':groupId', '<%=metadata.group.id%>');
        })
        .then(() => {
          isLoading(false);
        });
    } catch (error) {
      isLoading(false);
      toastMessage('error', error.message || '글 작성에 실패하였습니다.');
    }
  });

  // 취소 버튼 이벤트
  document.getElementById('btnCancel').addEventListener('click', async () => {
    if (
      await confirmMessage(
        'info',
        '작성을 취소하시겠습니까?<br>작성중인 내용은 저장되지 않습니다.',
        '<%=apiRoutes.contents.write.title%>'
      )
    ) {
      window.location.href = '<%=backendRoutes.contents.list.url%>'.replace(':groupId', '<%=metadata.group.id%>');
    }
  });
</script>
