<div class="block pt-2 mb-2">
  <h1 class='flex justify-between items-baseline gap-1.5 py-2 text-center text-slate-700 transition-all'>
    <span class="font-bold text-xl"><%=title%></span>
    <p class="text-right font-medium text-[13px] text-gray-400"><span class="pr-0.5 text-red-500">*</span>필수입력사항</p>
  </h1>
</div>
<form id="formContentUpdate" class="space-y-4 text-sm">
  <div class="space-y-4 text-sm bg-white p-4 mb-4 lg:p-6 rounded-xl shadow-[0_2px_30px_rgba(0,0,0,.06)]">
    <div>
      <label for="title"  class="block flex-none mb-2 font-medium text-[13px] text-gray-400">제목<span class="pl-0.5 text-red-500">*</span></label>
      <input type="text" id="title" name="title" class="w-full px-4 py-3 rounded-lg bg-gray-100 placeholder:text-sm placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500" value="<%=data.title%>" placeholder="제목을 입력해주세요." required>
    </div>
    <div>
      <label for="content"  class="block flex-none mb-2 font-medium text-[13px] text-gray-400">내용<span class="pl-0.5 text-red-500">*</span></label>
      <textarea id="content" name="content" class="w-full min-h-[160px] px-4 py-3 bg-gray-100 placeholder:text-sm placeholder:text-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="내용을 입력해주세요." required><%=data.content%></textarea>
    </div>
  </div>
  <div class="text-right">
    <button type="submit" class="orb-btn-primary">
      수정
    </button>
  </div>
</form>

<script>
document.getElementById('formContentUpdate').addEventListener('submit', async (e) => {
  e.preventDefault();

  try {
    // 폼 데이터 수집
    const formData = new FormData(e.target);

    // 폼 데이터 변환
    const data = {};
    formData.forEach((value, key) => {
        data[key] = value;
    });

    // 컨텐츠 등록 API 호출
    const apiUrl = '<%=apiBackendRoutes.contentsUpdate.url%>'.replace(':groupId', '<%=metadata.groupId%>').replace(':contentId', '<%=data.id%>');
    const response = await fetch(apiUrl, {
      method: '<%=apiBackendRoutes.contentsUpdate.method%>',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    // 응답 오류
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || response.statusText);
    }

    // 응답 성공
    alert('<%=apiBackendRoutes.contentsUpdate.title%> 성공');
    window.location.href = "<%=routes.contentsDetail.url%>".replace(':groupId', '<%=metadata.groupId%>').replace(':contentId', '<%=data.id%>');

  } catch (error) {
    alert(error.message || '서버 오류가 발생했습니다.');

  }
});
</script>