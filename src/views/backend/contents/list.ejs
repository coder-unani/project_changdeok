<div class="my-2">
  <h1 class="flex items-center justify-start gap-1.5 py-2 text-center text-slate-700 transition-all">
    <span class="orb-head"><%=title%></span>
  </h1>
</div>

<div class="bg-default-bg mb-4 overflow-x-auto rounded-xl p-4 text-sm shadow-[0_2px_30px_rgba(0,0,0,.06)] lg:p-6">
  <div class="space-y-4">
    <div class="flex w-full items-center justify-between gap-2">
      <div class="flex flex-1 justify-between gap-2">
        <input
          type="text"
          id="contents-query"
          class="orb-input lg:max-w-[200px]"
          placeholder="검색어를 입력해주세요."
        />
        <button id="btn-contents-search" class="orb-btn orb-btn-primary">조회</button>
      </div>
    </div>

    <!-- 게시물 목록 -->
    <div id="contents" class="flex overflow-x-auto"></div>

    <!-- 게시글 등록 -->
    <div class="flex items-center">
      <a
        href="<%=backendRoutes.contents.write.url.replace(':groupId', metadata.group.id)%>"
        class="orb-btn orb-btn-success"
        >게시글 등록</a
      >
    </div>
  </div>
</div>

<!-- grid.js -->
<%- include('../common/library/gridjs') %>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    const contents = document.getElementById('contents');
    const customGridLang = {
      ...gridLangKoKR,
      noRecordsFound: '등록된 게시글이 없습니다.',
    };

    let currentGrid = null;

    const initGrid = async () => {
      // 기존 grid 초기화
      currentGrid?.destroy();

      const query = document.getElementById('contents-query').value;
      const params = new URLSearchParams({ query });

      // gridjs 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: [
          { name: '글번호' },
          {
            name: '제목',
            formatter: (cell, row) => {
              const contentId = row.cells[0].data;
              const groupId = `<%=metadata.group.id%>`;
              const url = `<%=backendRoutes.contents.detail.url%>`;
              return gridjs.html(
                `<a href="${url.replace(':groupId', groupId).replace(':contentId', contentId)}" class="hover:underline decoration-gray-800">${cell}</a>`
              );
            },
          },
          { name: '작성자' },
          {
            name: '작성일',
            class: 'hidden lg:table-cell text-xs',
          },
        ],
        language: customGridLang,
        data: [],
        resizable: true,
        style: {
          table: { 'white-space': 'nowrap' },
        },
        sort: true,
        server: {
          url: `<%=apiRoutes.contents.list.url.replace(':groupId', metadata.group.id)%>?${params.toString()}`,
          headers: {
            Authorization: `Bearer ${getCookie('access_token')}`,
          },
          then: (data) => data.data.map((item) => [item.id, item.title, item.writerName, item.createdAt]),
          total: (data) => data.metadata.total,
        },
        pagination: {
          limit: 20,
          server: {
            url: (prev, page, limit) => {
              return `${prev}&page=${page}&pageSize=${limit}`;
            },
          },
        },
      });

      // gridjs 렌더링
      currentGrid.render(contents);
    };

    document.getElementById('btn-contents-search').addEventListener('click', () => {
      initGrid();
    });

    initGrid();
  });
</script>
