<div id="access-settings-container" class="hidden">
  <form id="access-settings-form">
    <input type="hidden" id="blocked-ip-json" name="blockedIpJson" value="<%=data.blockedIpJson%>" />
    <input type="hidden" id="blocked-bot-json" name="blockedBotJson" value="<%=data.blockedBotJson%>" />

    <ul class="mb-4 space-y-4">
      <!-- 차단 IP -->
      <li class="flex flex-col gap-2 lg:flex-row">
        <label for="blocked-ip" class="orb-label flex w-32 gap-1 lg:leading-11"> 차단 IP </label>
        <div class="flex w-full flex-col gap-2">
          <!-- 차단 IP 입력 -->
          <div class="flex flex-col justify-between gap-2 lg:flex-row">
            <div class="flex w-full flex-col">
              <div class="flex items-end gap-1">
                <input
                  type="text"
                  id="blocked-ip-a"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />.
                <input
                  type="text"
                  id="blocked-ip-b"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />.
                <input
                  type="text"
                  id="blocked-ip-c"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />.
                <input
                  type="text"
                  id="blocked-ip-d"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />
              </div>
              <div class="orb-remark px-2 pt-2 leading-5">
                <p>* 등록한 IP에 대해 웹사이트 접속이 차단됩니다.</p>
              </div>
            </div>

            <div>
              <button
                type="button"
                id="btn-add-blocked-ip"
                class="orb-btn orb-btn-common flex flex-none items-center gap-2"
              >
                <%- include('../../common/icons/plus') %> 추가
              </button>
            </div>
          </div>
          <!-- 차단 IP 목록 -->
          <!-- <div
            id="blocked-ip-container"
            class="border-border-2 mt-2 flex max-h-[400px] flex-wrap gap-2 overflow-y-auto rounded-lg border p-2"
          ></div> -->
          <div
            id="blocked-ip-container"
            class="border-border-2 mt-2 flex max-h-[400px] flex-col gap-2 overflow-y-auto rounded-lg border p-2"
          ></div>
        </div>
      </li>

      <!-- 차단 봇 패턴 -->
      <li class="flex flex-col gap-2 lg:flex-row">
        <label for="blocked-bot" class="orb-label flex w-32 gap-1 lg:leading-11"> 차단 봇 패턴 </label>
        <div class="flex flex-1 flex-col gap-2">
          <div class="flex flex-col justify-between gap-2 lg:flex-row">
            <div class="flex w-full flex-col">
              <input
                type="text"
                id="blocked-bot"
                class="w-[230px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                placeholder="차단할 봇을 입력해주세요."
              />
              <p class="orb-remark px-2 pt-2">
                * 트래픽 사용량을 급격하게 증가시키는 악성 봇의 접근을 차단할 수 있습니다.
              </p>
            </div>

            <div>
              <button
                type="button"
                id="btn-add-blocked-bot"
                class="orb-btn orb-btn-common flex flex-none items-center gap-2"
              >
                <%- include('../../common/icons/plus') %> 추가
              </button>
            </div>
          </div>

          <div
            id="blocked-bot-container"
            class="border-border-2 mt-2 flex max-h-[400px] flex-col gap-2 overflow-y-auto rounded-lg border p-2"
          ></div>
        </div>
      </li>
    </ul>
    <div class="flex justify-end">
      <button type="submit" class="orb-btn orb-btn-primary">저장</button>
    </div>
  </form>
</div>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('access-settings-form').addEventListener('submit', async (e) => {
      e.preventDefault();

      const blockedIpJson = document.getElementById('blocked-ip-json').value;
      const blockedBotJson = document.getElementById('blocked-bot-json').value;

      const response = await fetch('<%=apiRoutes.settings.updateAccess.url%>', {
        method: '<%=apiRoutes.settings.updateAccess.method%>',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          blockedIpJson,
          blockedBotJson,
        }),
      });

      if (!response.ok) {
        toastMessage('error', '접속 관리 설정 저장 중 오류가 발생했습니다.');
        return;
      }

      alertMessage('success', '접속 관리 설정이 저장되었습니다.');
      statusMessage('수정 사항이 있습니다. 시스템 재시작 후 반영됩니다.');
    });

    // IP 입력 필드 숫자만 입력 가능하도록 설정
    const ipInputs = ['blocked-ip-a', 'blocked-ip-b', 'blocked-ip-c', 'blocked-ip-d'];
    ipInputs.forEach((id) => {
      document.getElementById(id).addEventListener('input', (e) => {
        e.target.value = e.target.value.replace(/[^0-9]/g, '');
        if (parseInt(e.target.value) > 255) {
          e.target.value = '255';
        }
      });
    });

    // IP 추가 버튼 클릭 이벤트
    document.getElementById('btn-add-blocked-ip').addEventListener('click', () => {
      const ipParts = ipInputs.map((id) => document.getElementById(id).value);

      // 모든 필드가 채워져 있는지 확인
      if (ipParts.some((part) => !part)) {
        alertMessage('error', 'IP 주소의 모든 부분을 입력해주세요.');
        return;
      }

      // IP 주소 형식 검증
      const ip = ipParts.join('.');
      if (!/^(\d{1,3}\.){3}\d{1,3}$/.test(ip)) {
        alertMessage('error', '올바른 IP 주소 형식이 아닙니다.');
        return;
      }

      // 이미 존재하는 IP인지 확인
      const existingIps = Array.from(document.querySelectorAll('.blocked-ip-item')).map((item) => item.dataset.ip);
      if (existingIps.includes(ip)) {
        alertMessage('error', '이미 등록된 IP 주소입니다.');
        return;
      }

      // IP 항목 추가
      const ipContainer = document.getElementById('blocked-ip-container');
      const ipItem = document.createElement('div');
      ipItem.className = 'blocked-ip-item flex items-center gap-2 bg-gray-50 px-3 py-2 rounded-md';
      ipItem.dataset.ip = ip;

      ipItem.innerHTML = `
        <span class="orb-label">${ip}</span>
        <button type="button" class="delete-ip-btn ml-auto p-1 rounded-full text-gray-400 transition-all ease-in-out hover:text-red-500 hover:bg-red-100">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" fill="currentColor" class="h-[14px] w-[14px]">
            <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
          </svg>
        </button>
      `;

      // 삭제 버튼 이벤트 리스너
      ipItem.querySelector('.delete-ip-btn').addEventListener('click', () => {
        ipItem.remove();
        updateBlockedIpJson();
      });

      // 첫 번째 자식 요소로 추가
      if (ipContainer.firstChild) {
        ipContainer.insertBefore(ipItem, ipContainer.firstChild);
      } else {
        ipContainer.appendChild(ipItem);
      }

      // 입력 필드 초기화
      ipInputs.forEach((id) => {
        document.getElementById(id).value = '';
      });

      // blockedIpJson 업데이트
      updateBlockedIpJson();
    });

    // blockedIpJson 업데이트 함수
    function updateBlockedIpJson() {
      const blockedIps = Array.from(document.querySelectorAll('.blocked-ip-item')).map((item) => item.dataset.ip);
      document.getElementById('blocked-ip-json').value = JSON.stringify(blockedIps);
    }

    // 기존 차단 IP 목록 로드
    try {
      const blockedIpJson = document.getElementById('blocked-ip-json').value;
      const blockedIps = JSON.parse(blockedIpJson || '[]');

      blockedIps.forEach((ip) => {
        const ipContainer = document.getElementById('blocked-ip-container');
        const ipItem = document.createElement('div');
        ipItem.className = 'blocked-ip-item flex items-center gap-2 bg-gray-50 px-3 py-2 rounded-md';
        ipItem.dataset.ip = ip;

        ipItem.innerHTML = `
          <span class="orb-label">${ip}</span>
          <button type="button" class="delete-ip-btn ml-auto p-1 rounded-full text-gray-400 transition-all ease-in-out hover:text-red-500 hover:bg-red-100">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" fill="currentColor" class="h-[14px] w-[14px]">
              <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
            </svg>
          </button>
        `;

        ipItem.querySelector('.delete-ip-btn').addEventListener('click', () => {
          ipItem.remove();
          updateBlockedIpJson();
        });

        ipContainer.appendChild(ipItem);
      });
    } catch (error) {
      toastMessage('error', '차단 IP 목록 로드 중 오류 발생:', error);
    }

    // 봇 패턴 추가 버튼 클릭 이벤트
    document.getElementById('btn-add-blocked-bot').addEventListener('click', () => {
      const botPattern = document.getElementById('blocked-bot').value.trim();

      // 패턴이 비어있는지 확인
      if (!botPattern) {
        alertMessage('error', '봇 패턴을 입력해주세요.');
        return;
      }

      // 이미 존재하는 패턴인지 확인
      const existingPatterns = Array.from(document.querySelectorAll('.blocked-bot-item')).map(
        (item) => item.dataset.pattern
      );
      if (existingPatterns.includes(botPattern)) {
        alertMessage('error', '이미 등록된 봇 패턴입니다.');
        return;
      }

      // 봇 패턴 항목 추가
      const botContainer = document.getElementById('blocked-bot-container');
      const botItem = document.createElement('div');
      botItem.className = 'blocked-bot-item flex items-center gap-2 bg-gray-50 px-3 py-2 rounded-md';
      botItem.dataset.pattern = botPattern;

      botItem.innerHTML = `
        <span class="orb-label">${botPattern}</span>
        <button type="button" class="delete-bot-btn ml-auto p-1 rounded-full text-gray-400 transition-all ease-in-out hover:text-red-500 hover:bg-red-100">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" fill="currentColor" class="h-[14px] w-[14px]">
            <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
          </svg>
        </button>
      `;

      // 삭제 버튼 이벤트 리스너
      botItem.querySelector('.delete-bot-btn').addEventListener('click', () => {
        botItem.remove();
        updateBlockedBotJson();
      });

      // 첫 번째 자식 요소로 추가
      if (botContainer.firstChild) {
        botContainer.insertBefore(botItem, botContainer.firstChild);
      } else {
        botContainer.appendChild(botItem);
      }

      // 입력 필드 초기화
      document.getElementById('blocked-bot').value = '';

      // blockedBotJson 업데이트
      updateBlockedBotJson();
    });

    // blockedBotJson 업데이트 함수
    function updateBlockedBotJson() {
      const blockedBots = Array.from(document.querySelectorAll('.blocked-bot-item')).map(
        (item) => item.dataset.pattern
      );
      document.getElementById('blocked-bot-json').value = JSON.stringify(blockedBots);
    }

    // 기존 차단 봇 패턴 목록 로드
    try {
      const blockedBotJson = document.getElementById('blocked-bot-json').value;
      const blockedBots = JSON.parse(blockedBotJson || '[]');

      blockedBots.forEach((pattern) => {
        const botContainer = document.getElementById('blocked-bot-container');
        const botItem = document.createElement('div');
        botItem.className = 'blocked-bot-item flex items-center gap-2 bg-gray-50 px-3 py-2 rounded-md';
        botItem.dataset.pattern = pattern;

        botItem.innerHTML = `
          <span class="orb-label">${pattern}</span>
          <button type="button" class="delete-bot-btn ml-auto p-1 rounded-full text-gray-400 transition-all ease-in-out hover:text-red-500 hover:bg-red-100">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" fill="currentColor" class="h-[14px] w-[14px]">
              <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
            </svg>
          </button>
        `;

        botItem.querySelector('.delete-bot-btn').addEventListener('click', () => {
          botItem.remove();
          updateBlockedBotJson();
        });

        botContainer.appendChild(botItem);
      });
    } catch (error) {
      toastMessage('error', '차단 봇 패턴 목록 로드 중 오류 발생:', error);
    }
  });
</script>
