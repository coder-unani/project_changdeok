<div id="access-settings-container" class="hidden">
  <form id="access-settings-form">
    <input type="hidden" id="blocked-ip-json" name="blockedIpJson" value="<%=data.blockedIpJson%>" />
    <input type="hidden" id="blocked-bot-json" name="blockedBotJson" value="<%=data.blockedBotJson%>" />

    <ul class="mb-4 space-y-4">
      <!-- 차단 IP -->
      <li class="flex flex-col gap-2 lg:flex-row">
        <label for="blocked-ip" class="orb-label flex w-32 gap-1 lg:leading-11"> 차단 IP </label>
        <div class="flex w-full flex-col gap-2">
          <!-- 차단 IP 입력 -->
          <div class="flex flex-col justify-between gap-2 lg:flex-row">
            <div class="flex flex-1 flex-col">
              <div class="flex items-end gap-1">
                <input
                  type="text"
                  id="blocked-ip-a"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />.
                <input
                  type="text"
                  id="blocked-ip-b"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />.
                <input
                  type="text"
                  id="blocked-ip-c"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />.
                <input
                  type="text"
                  id="blocked-ip-d"
                  class="w-full max-w-[80px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                  maxlength="3"
                  pattern="[0-9]*"
                  inputmode="numeric"
                />
              </div>
              <div class="orb-remark px-2 pt-2 leading-5">
                <p>* 등록한 IP에 대해 웹사이트 접속이 차단됩니다.</p>
              </div>
            </div>

            <div>
              <button
                type="button"
                id="btn-add-blocked-ip"
                class="orb-btn orb-btn-info flex flex-none items-center gap-2"
              >
                <%- include('../../common/icons/plus') %> 추가
              </button>
            </div>
          </div>
          <!-- 차단 IP 목록 -->
          <div
            id="blocked-ip-container"
            class="border-main-border mt-2 flex max-h-[400px] min-h-[100px] flex-col gap-2 overflow-y-auto rounded-lg border p-2"
          ></div>
        </div>
      </li>

      <!-- 차단 봇 패턴 -->
      <li class="flex flex-col gap-2 lg:flex-row">
        <label for="blocked-bot" class="orb-label flex w-32 gap-1 lg:leading-11"> 차단 봇 패턴 </label>
        <div class="flex flex-1 flex-col gap-2">
          <div class="flex flex-col justify-between gap-2 lg:flex-row">
            <div class="flex flex-1 flex-col">
              <input
                type="text"
                id="blocked-bot"
                class="w-[230px] rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                placeholder="차단할 봇을 입력해주세요."
              />
              <p class="orb-remark px-2 pt-2">
                * 트래픽 사용량을 급격하게 증가시키는 악성 봇의 접근을 차단할 수 있습니다.
              </p>
            </div>

            <div>
              <button
                type="button"
                id="btn-add-blocked-bot"
                class="orb-btn orb-btn-info flex flex-none items-center gap-2"
              >
                <%- include('../../common/icons/plus') %> 추가
              </button>
            </div>
          </div>

          <div
            id="blocked-bot-container"
            class="border-main-border mt-2 flex max-h-[400px] min-h-[100px] flex-col gap-2 overflow-y-auto rounded-lg border p-2"
          ></div>
        </div>
      </li>
    </ul>
    <div class="flex justify-end">
      <button type="submit" class="orb-btn orb-btn-success">저장</button>
    </div>
  </form>
</div>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    // 삭제 버튼 생성
    const createDeleteButton = (onClick) => {
      const button = document.createElement('button');
      button.type = 'button';
      button.className =
        'delete-btn ml-auto p-1 rounded-full text-gray-400 transition-all ease-in-out hover:text-red-500 hover:bg-red-100';
      button.innerHTML = `<%- include('../../common/icons/close') %>`;
      button.addEventListener('click', onClick);
      return button;
    };

    // 차단 IP 또는 차단 봇 패턴 아이템 생성
    const createItemElement = (value, type) => {
      const item = document.createElement('div');
      item.className = `${type}-item flex items-center gap-2 bg-paper-bg px-3 py-2 rounded-md hover:bg-gray-100`;
      item.dataset[type === 'blocked-ip' ? 'ip' : 'pattern'] = value;

      const label = document.createElement('span');
      label.className = 'orb-label';
      label.textContent = value;

      const deleteBtn = createDeleteButton(() => {
        item.remove();
        updateJson(type);
      });

      item.appendChild(label);
      item.appendChild(deleteBtn);
      return item;
    };

    // JSON 업데이트
    const updateJson = (type) => {
      const items = Array.from(document.querySelectorAll(`.${type}-item`)).map(
        (item) => item.dataset[type === 'blocked-ip' ? 'ip' : 'pattern']
      );
      document.getElementById(`${type}-json`).value = JSON.stringify(items);
    };

    // 기존 목록 로드
    const loadExistingItems = (type, containerId) => {
      try {
        const json = document.getElementById(`${type}-json`).value;
        const items = JSON.parse(json || '[]');
        const container = document.getElementById(containerId);

        items.forEach((value) => {
          const item = createItemElement(value, type);
          if (container.firstChild) {
            container.insertBefore(item, container.firstChild);
          } else {
            container.appendChild(item);
          }
        });
      } catch (error) {
        toastMessage('error', `${type === 'blocked-ip' ? '차단 IP' : '차단 봇 패턴'} 목록 로드 중 오류 발생:`, error);
      }
    };

    // 접속 관리 설정 저장
    document.getElementById('access-settings-form').addEventListener('submit', async (e) => {
      e.preventDefault();

      isLoading(true);

      const blockedIpJson = document.getElementById('blocked-ip-json').value;
      const blockedBotJson = document.getElementById('blocked-bot-json').value;

      try {
        const response = await fetch('<%=apiRoutes.settings.updateAccess.url%>', {
          method: '<%=apiRoutes.settings.updateAccess.method%>',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            blockedIpJson,
            blockedBotJson,
          }),
        });

        if (!response.ok) {
          toastMessage('error', '접속 관리 설정 저장 중 오류가 발생했습니다.');
          return;
        }

        alertMessage('success', '접속 관리 설정이 저장되었습니다.');
        statusMessage('수정 사항이 있습니다. 시스템 재시작 후 반영됩니다.');
      } catch (error) {
        toastMessage('error', '접속 관리 설정 저장 중 오류가 발생했습니다.');
      } finally {
        isLoading(false);
      }
    });

    // IP 입력 필드 숫자만 입력 가능하도록 설정
    const ipInputs = ['blocked-ip-a', 'blocked-ip-b', 'blocked-ip-c', 'blocked-ip-d'];
    ipInputs.forEach((id) => {
      document.getElementById(id).addEventListener('input', (e) => {
        e.target.value = e.target.value.replace(/[^0-9]/g, '');
        if (parseInt(e.target.value) > 255) e.target.value = '255';
      });
    });

    // IP 추가 버튼 클릭 이벤트
    document.getElementById('btn-add-blocked-ip').addEventListener('click', () => {
      const ipParts = ipInputs.map((id) => document.getElementById(id).value);

      // 모든 필드가 채워져 있는지 확인
      if (ipParts.some((part) => !part)) {
        alertMessage('error', 'IP 주소의 모든 부분을 입력해주세요.');
        return;
      }

      // IP 주소 형식 검증
      const ip = ipParts.join('.');
      if (!/^(\d{1,3}\.){3}\d{1,3}$/.test(ip)) {
        alertMessage('error', '올바른 IP 주소 형식이 아닙니다.');
        return;
      }

      // 이미 존재하는 IP인지 확인
      const existingIps = Array.from(document.querySelectorAll('.blocked-ip-item')).map((item) => item.dataset.ip);
      if (existingIps.includes(ip)) {
        alertMessage('error', '이미 등록된 IP 주소입니다.');
        return;
      }

      // 차단 IP 목록 컨테이너에 아이템 추가
      const container = document.getElementById('blocked-ip-container');
      const item = createItemElement(ip, 'blocked-ip');

      // 첫 번째 자식 요소로 추가
      if (container.firstChild) {
        container.insertBefore(item, container.firstChild);
      } else {
        container.appendChild(item);
      }

      // 입력 필드 초기화
      ipInputs.forEach((id) => {
        document.getElementById(id).value = '';
      });

      // JSON 업데이트
      updateJson('blocked-ip');
    });

    // 봇 패턴 추가 버튼 클릭 이벤트
    document.getElementById('btn-add-blocked-bot').addEventListener('click', () => {
      const pattern = document.getElementById('blocked-bot').value.trim();

      // 패턴이 비어있는지 확인
      if (!pattern) {
        alertMessage('error', '봇 패턴을 입력해주세요.');
        return;
      }

      // 이미 존재하는 패턴인지 확인
      const existingPatterns = Array.from(document.querySelectorAll('.blocked-bot-item')).map(
        (item) => item.dataset.pattern
      );
      if (existingPatterns.includes(pattern)) {
        alertMessage('error', '이미 등록된 봇 패턴입니다.');
        return;
      }

      // 차단 봇 패턴 목록 컨테이너에 아이템 추가
      const container = document.getElementById('blocked-bot-container');
      const item = createItemElement(pattern, 'blocked-bot');

      // 첫 번째 자식 요소로 추가
      if (container.firstChild) {
        container.insertBefore(item, container.firstChild);
      } else {
        container.appendChild(item);
      }

      // 입력 필드 초기화
      document.getElementById('blocked-bot').value = '';

      // JSON 업데이트
      updateJson('blocked-bot');
    });

    // 기존 목록 로드
    loadExistingItems('blocked-ip', 'blocked-ip-container');
    loadExistingItems('blocked-bot', 'blocked-bot-container');
  });
</script>
