<div class="my-2">
  <h1 class="flex items-center gap-1.5 justify-self-start py-2 text-center text-slate-700 transition-all">
    <span class="orb-head"><%=title%></span>
  </h1>
</div>

<div class="space-y-4">
  <!-- 시스템 상태창 -->
  <%- include('partials/system-status') %>

  <!-- 설정 -->
  <div class="rounded-xl bg-white p-4 text-sm shadow-[0_2px_30px_0_rgba(0,0,0,.06)] lg:p-6">
    <!-- 탭메뉴 -->
    <%- include('partials/tab-menu') %>

    <!-- 사이트 설정 -->
    <%- include('partials/site-settings') %>

    <!-- 회사 설정 -->
    <%- include('partials/company-settings') %>

    <!-- 접근 설정 -->
    <%- include('partials/access-settings') %>

    <!-- 시스템 설정 -->
    <%- include('partials/system-settings') %>
  </div>
</div>

<!-- toastify -->
<%- include('../common/library/toastify') %>

<!-- sweetalert2 -->
<%- include('../common/library/sweetalert2') %>

<script nonce="<%=nonce%>">
  // 시스템 상태 메시지 함수
  const statusMessage = (message) => {
    if (message) {
      document.getElementById('system-status-message-container').classList.remove('hidden');
      document.getElementById('system-status-message').textContent = message;
    } else {
      document.getElementById('system-status-message-container').classList.add('hidden');
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    const siteSettingsContainer = document.getElementById('site-settings-container');
    const companySettingsContainer = document.getElementById('company-settings-container');
    const accessSettingsContainer = document.getElementById('access-settings-container');
    const systemSettingsContainer = document.getElementById('system-settings-container');

    let currentTab = null;

    // 시스템 상태 확인 함수
    const getSystemStatus = async () => {
      try {
        const response = await fetch('<%=apiRoutes.systems.status.url%>', {
          method: '<%=apiRoutes.systems.status.method%>',
        });

        if (!response.ok) {
          throw new Error('시스템 상태 확인 중 오류가 발생했습니다.');
        }

        const data = await response.json();

        const processInfo = data.data.processInfo;
        const memoryInfo = data.data.memoryInfo;
        const cpuInfo = data.data.cpuInfo;
        const uptime = data.data.uptime;

        const processStatus = processInfo.isRunning ? `실행 중 (PID: ${processInfo.pid})` : '중지됨';
        const memoryStatus = `${memoryInfo.free} / ${memoryInfo.total}`;
        const cpuStatus = `${cpuInfo.used} / ${cpuInfo.idle}`;

        document.getElementById('process-status').textContent = processStatus;
        document.getElementById('memory-status').textContent = memoryStatus;
        document.getElementById('cpu-status').textContent = cpuStatus;
        document.getElementById('uptime').textContent = uptime;

        toastMessage('success', '시스템 정보가 갱신되었습니다.');

        return true;
      } catch (error) {
        document.getElementById('process-status').textContent = '확인 불가';
        document.getElementById('memory-status').textContent = '확인 불가';
        document.getElementById('cpu-status').textContent = '확인 불가';
        document.getElementById('uptime').textContent = '확인 불가';

        toastMessage('error', '시스템 상태를 불러오는 중 오류가 발생했습니다.');

        return false;
      }
    };

    // 서버 재시작 함수
    const restartServer = async () => {
      if (!confirmMessage('서버를 재시작하시겠습니까?')) {
        return;
      }

      try {
        const response = await fetch('<%=apiRoutes.systems.restart.url%>', {
          method: '<%=apiRoutes.systems.restart.method%>',
        });

        if (!response.ok) {
          throw new Error('서버 재시작 중 오류가 발생했습니다.');
        }

        setTimeout(() => {
          const result = getSystemStatus();
          if (result) {
            alertMessage('success', '서버가 재시작되었습니다.');
            statusMessage(null);
          } else {
            alertMessage('error', '서버 재시작 중 오류가 발생했습니다.');
          }
        }, 2000);
      } catch (error) {
        alertMessage('error', error.message || '서버 재시작 중 오류가 발생했습니다.');
      }
    };

    // 탭 전환 함수
    const switchTab = (activeTab) => {
      // 모든 탭 버튼에서 active 클래스 제거
      document.querySelectorAll('[data-tab]').forEach((button) => {
        button.classList.remove('active', 'bg-blue-50', 'text-blue-500');
        button.classList.add(
          'hover:bg-gray-50',
          'hover:text-gray-700',
          'dark:hover:bg-gray-800',
          'dark:hover:text-gray-400'
        );
      });

      // 클릭된 탭 버튼에 active 클래스 추가
      const activeButton = document.querySelector(`[data-tab="${activeTab}"]`);
      if (activeButton) {
        activeButton.classList.remove(
          'hover:bg-gray-50',
          'hover:text-gray-700',
          'dark:hover:bg-gray-800',
          'dark:hover:text-gray-400'
        );
        activeButton.classList.add('active', 'bg-blue-50', 'text-blue-500');
      }

      if (activeTab === 'site-settings') {
        siteSettingsContainer.classList.remove('hidden');
        companySettingsContainer.classList.add('hidden');
        accessSettingsContainer.classList.add('hidden');
        systemSettingsContainer.classList.add('hidden');
      } else if (activeTab === 'company-settings') {
        siteSettingsContainer.classList.add('hidden');
        companySettingsContainer.classList.remove('hidden');
        accessSettingsContainer.classList.add('hidden');
        systemSettingsContainer.classList.add('hidden');
      } else if (activeTab === 'access-settings') {
        siteSettingsContainer.classList.add('hidden');
        companySettingsContainer.classList.add('hidden');
        accessSettingsContainer.classList.remove('hidden');
        systemSettingsContainer.classList.add('hidden');
      } else if (activeTab === 'system-settings') {
        siteSettingsContainer.classList.add('hidden');
        companySettingsContainer.classList.add('hidden');
        accessSettingsContainer.classList.add('hidden');
        systemSettingsContainer.classList.remove('hidden');
      }

      currentTab = activeTab;
    };

    // 초기화 함수
    const init = async () => {
      switchTab('site-settings');
      await getSystemStatus();
    };

    // 탭 버튼에 이벤트 리스너 추가
    document.querySelectorAll('[data-tab]').forEach((button) => {
      button.addEventListener('click', () => {
        const tabName = button.getAttribute('data-tab');
        switchTab(tabName);
      });
    });

    // 새로고침 버튼 이벤트 리스너 추가
    document.getElementById('refresh-system-status').addEventListener('click', getSystemStatus);

    // 재시작 버튼 이벤트 리스너 추가
    document.getElementById('restart-server').addEventListener('click', restartServer);

    // 초기화
    init();
  });
</script>
