<div class="my-2">
  <h1 class="flex items-center justify-start gap-1.5 py-2 text-center text-slate-700 transition-all">
    <span class="orb-head"><%=title%></span>
  </h1>
</div>

<div class="bg-default-bg orb-shadow overflow-x-auto rounded-xl p-4 text-sm lg:p-6">
  <div class="space-y-4">
    <div class="flex w-full items-center justify-between gap-2">
      <div class="flex flex-1 justify-between gap-2">
        <input type="text" id="banners-query" class="orb-input lg:max-w-[200px]" placeholder="검색어를 입력해주세요." />
        <button id="btn-banners-search" class="orb-btn orb-btn-primary">조회</button>
      </div>
    </div>

    <!-- 배너 목록 -->
    <div id="banners" class="flex overflow-x-auto"></div>

    <!-- 배너 등록 -->
    <div class="flex">
      <a
        href="<%=backendRoutes.banners.write.url%>?gp=<%=metadata.groupInfo.id%>&sq=<%=metadata.seq%>"
        class="orb-btn orb-btn-primary"
        >배너 등록</a
      >
    </div>
  </div>
</div>

<!-- grid.js -->
<%- include('../common/library/gridjs') %>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    const banners = document.getElementById('banners');
    const customGridLang = {
      ...gridLangKoKR,
      noRecordsFound: '등록된 배너가 없습니다.',
    };

    let currentGrid = null;

    const initGrid = async () => {
      // 기존 grid 초기화
      currentGrid?.destroy();

      const query = document.getElementById('banners-query').value;
      const params = new URLSearchParams({ query });

      // url 쿼리 값 가져오기
      const urlParams = new URLSearchParams(window.location.search);
      const groupId = urlParams.get('gp');
      const seq = urlParams.get('sq');

      // API 요청 파라미터에 그룹 ID와 시퀀스 추가
      if (groupId) params.append('groupId', groupId);
      if (seq) params.append('seq', seq);

      // gridjs 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: [
          { name: '번호' },
          {
            name: '이미지',
            formatter: (cell) => {
              return gridjs.html(
                `<img src="${cell || '/images/no-image-200x200.jpg'}" class="w-[100px] h-[100px] object-cover rounded-md" alt="이미지" />`
              );
            },
          },
          {
            name: '상세정보',
            formatter: (cell, row) => {
              const bannerId = row.cells[0].data;
              const url = `<%=backendRoutes.banners.detail.url%>`;
              return gridjs.html(
                `<div>
                  <p class="text-sm font-semibold break-keep mb-1.5">
                    <a href="${url.replace(':bannerId', bannerId)}" class="hover:underline decoration-gray-800">${cell.title}</a>
                  </p>
                  <p class="text-[13px] text-gray-400">${cell.description}</p>
                </div>`
              );
            },
          },
          {
            name: '발행 기간',
            formatter: (cell) => {
              return gridjs.html(
                `<div>
                  <span class="block">${cell.publishedAt ? cell.publishedAt.slice(0, -3) : ''}</span>
                  <span class="block">~ ${cell.unpublishedAt ? cell.unpublishedAt.slice(0, -3) : ''}</span>
                </div>`
              );
            },
          },
          {
            name: '발행 여부',
            formatter: (cell) => {
              let status = '';
              let className = '';

              if (!cell.isPublished) {
                status = '미발행';
                className = 'bg-amber-100 text-amber-500';
              } else if (
                cell.publishedAt <= new Date().toISOString() &&
                (!cell.unpublishedAt || cell.unpublishedAt >= new Date().toISOString())
              ) {
                status = '발행중';
                className = 'bg-emerald-100 text-emerald-500';
              } else if (cell.publishedAt > new Date().toISOString()) {
                status = '예약';
                className = 'bg-blue-100 text-blue-500';
              } else {
                status = '종료';
                className = 'bg-gray-100 text-gray-500';
              }

              return gridjs.html(
                `<span class="px-2.5 py-1 ${className} rounded-full text-sm font-medium">${status}</span>`
              );
            },
          },
        ],
        language: customGridLang,
        data: [],
        resizable: true,
        style: {
          table: { 'white-space': 'nowrap' },
        },
        sort: true,
        server: {
          url: `<%=apiRoutes.banners.list.url%>?${params.toString()}`,
          headers: {
            Authorization: `Bearer ${getCookie('access_token')}`,
          },
          then: (data) =>
            data.data.map((item) => [
              item.id,
              item.imagePath,
              { title: item.title, description: item.description },
              { publishedAt: item.publishedAt, unpublishedAt: item.unpublishedAt },
              { isPublished: item.isPublished, publishedAt: item.publishedAt, unpublishedAt: item.unpublishedAt },
            ]),
          total: (data) => data.metadata.total,
        },
        pagination: {
          limit: 20,
          server: {
            url: (prev, page, limit) => {
              return `${prev}&page=${page + 1}&pageSize=${limit}`;
            },
          },
        },
      });

      // gridjs 렌더링
      currentGrid.render(banners);
    };

    document.getElementById('btn-banners-search').addEventListener('click', () => {
      initGrid();
    });

    initGrid();
  });
</script>
