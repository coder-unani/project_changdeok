<div class="hidden" id="login-history-container">
  <div class="flex w-full items-center justify-between space-y-2">
    <div class="flex flex-col gap-2 lg:flex-row">
      <label class="orb-label w-12 lg:leading-11">날짜</label>
      <div class="flex items-center gap-2">
        <input
          type="date"
          id="login-history-start-date"
          class="w-full rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none lg:w-[160px]"
          value="<%=new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0]%>"
        />
        ~
        <input
          type="date"
          id="login-history-end-date"
          class="w-full rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none lg:w-[160px]"
          value="<%=new Date(Date.now() + 9 * 60 * 60 * 1000).toISOString().split('T')[0]%>"
        />
      </div>
      <label class="orb-label w-12 lg:leading-11">검색어</label>
      <input
        type="text"
        id="login-history-query"
        class="w-full rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none lg:w-[160px]"
        placeholder="검색어를 입력해주세요."
      />
    </div>
    <div class="flex justify-end lg:block">
      <button id="btn-login-history-search" class="orb-btn orb-btn-primary">조회</button>
    </div>
  </div>
  <div id="login-history"></div>
</div>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    const loginHistory = document.getElementById('login-history');

    let currentGrid = null;

    const initGrid = () => {
      // 기존 grid 초기화
      currentGrid?.destroy();

      // gridjs 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: ['사용자명', '로그인 날짜', '로그인 시간', 'IP 주소', '상태'],
        language: gridLangKoKR,
        data: [],
        className: {
          container: 'custom-gridjs-container', // 커스텀 페이지네이션 있을 경우 컨테이너 클래스 추가
        },
        resizable: true,
        style: {
          table: { 'white-space': 'nowrap' },
        },
        sort: true,
        server: {
          url: `<%=apiRoutes.employees.loginHistory.url%>`,
          then: (data) =>
            data.data.map((item) => [item.employeeEmail, item.loginAt, item.loginTime, item.clientIp, item.status]),
          total: (data) => data.metadata.total,
        },
        pagination: {
          limit: 20,
          server: {
            url: (prev, page, limit) => {
              const startDate = document.getElementById('login-history-start-date').value;
              const endDate = document.getElementById('login-history-end-date').value;
              const search = document.getElementById('login-history-query').value;
              return `${prev}?page=${page}&pageSize=${limit}&startDate=${startDate}&endDate=${endDate}&query=${search}`;
            },
          },
        },
      });

      // gridjs 렌더링
      currentGrid.render(loginHistory);
    };

    document.getElementById('btn-login-history-search').addEventListener('click', () => {
      initGrid();
    });
  });
</script>
