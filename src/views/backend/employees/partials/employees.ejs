<div class="hidden" id="employees-container">
  <div class="flex w-full items-center justify-between space-y-2">
    <div class="flex flex-col gap-2 lg:flex-row">
      <input
        type="text"
        id="employees-query"
        class="w-full rounded-lg bg-gray-100 px-4 py-3 placeholder:text-sm placeholder:text-gray-400 focus:ring-2 focus:ring-blue-200 focus:outline-none lg:w-[160px]"
        placeholder="검색어를 입력해주세요."
      />
    </div>
    <div class="flex justify-end lg:block">
      <button id="btn-employees-search" class="orb-btn orb-btn-primary">조회</button>
    </div>
  </div>
  <!-- 관리자 목록 -->
  <div id="employees" class="flex overflow-x-auto"></div>
</div>

<script nonce="<%=nonce%>">
  document.addEventListener('DOMContentLoaded', () => {
    const employees = document.getElementById('employees');

    let currentGrid = null;

    const initGrid = async () => {
      // 기존 grid 초기화
      currentGrid?.destroy();

      // gridjs 인스턴스 생성
      currentGrid = new gridjs.Grid({
        columns: [
          { name: '번호' },
          {
            name: '이메일',
            formatter: (cell, row) => {
              const adminId = row.cells[0].data;
              return gridjs.html(
                `<a href="/admin/employees/${adminId}" class="hover:underline decoration-gray-800">${cell}</a>`
              );
            },
          },
          {
            name: '이름',
            formatter: (cell, row) => {
              const adminId = row.cells[0].data;
              return gridjs.html(
                `<a href="/admin/employees/${adminId}" class="hover:underline decoration-gray-800">${cell}</a>`
              );
            },
          },
          { name: '생성일' },
          { name: '마지막 로그인' },
        ],
        language: gridLangKoKR,
        data: [],
        className: {
          container: 'custom-gridjs-container', // 커스텀 페이지네이션 있을 경우 컨테이너 클래스 추가
        },
        resizable: true,
        style: {
          table: { 'white-space': 'nowrap' },
        },
        sort: true,
        server: {
          url: `<%=apiRoutes.employees.list.url%>`,
          then: (data) => data.data.map((item) => [item.id, item.email, item.name, item.createdAt, item.lastLoginAt]),
          total: (data) => data.metadata.total,
        },
        pagination: {
          limit: 20,
          server: {
            url: (prev, page, limit) => {
              const query = document.getElementById('employees-query').value;
              return `${prev}?page=${page}&pageSize=${limit}&query=${query}`;
            },
          },
        },
      });

      // gridjs 렌더링
      currentGrid.render(employees);
    };

    document.getElementById('btn-employees-search').addEventListener('click', () => {
      initGrid();
    });
  });
</script>
